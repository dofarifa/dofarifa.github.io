<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RM学校代码分析</title>
      <link href="/2025/08/13/%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
      <url>/2025/08/13/%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h3 id="Freertos任务"><a href="#Freertos任务" class="headerlink" title="Freertos任务"></a>Freertos任务</h3><p>总共执行四个任务，三个底盘的任务和一个测试的任务，分别为<strong>chasis_task.cpp</strong>,<strong>my_test_task.cpp</strong>,<strong>communicate_task.cpp</strong>,<strong>detect_task.cpp</strong>。下面分别从每个任务入手分析代码，先从<strong>chasis_task.cpp</strong>入手，在文件<strong>chasis.cpp</strong>种声明了类Chasis的全局实例对象，即<strong>chasis</strong>, 在任务chasis_task中先执行初始化即init():</p><h4 id="chasis-init-函数："><a href="#chasis-init-函数：" class="headerlink" title="chasis::init()函数："></a>chasis::init()函数：</h4><p>先获取遥控器指针，通过代码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chassis_RC = remote_control.get_remote_control_point();</span><br><span class="line">last_chassis_RC = remote_control.get_last_remote_control_point();</span><br></pre></td></tr></table></figure><p>然后设置模式，设置初始的模式为<strong>CHASSIS_ZERO_FORCE</strong>，控制模式设置为<strong>CHASSIS_VECTOR_RAW</strong>，即直接输出控制，然后通过for循环初始化四个电机，在<strong>chasis.h</strong>文件中对Motor.cpp文件中的类M3508进行了实例化：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">M3508_motor chassis_motive_motor[4];</span><br></pre></td></tr></table></figure><p>字初始化中即传入由函数<strong>get_chassis_motive_motor_measure_point(i)</strong> 获取到都电机数据指针，然后创建一个数组**motive_speed_pid_parm[5]**，存入pid相关数据：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;MOTIVE_MOTOR_SPEED_PID_KP, MOTIVE_MOTOR_SPEED_PID_KI, MOTIVE_MOTOR_SPEED_PID_KD, MOTIVE_MOTOR_SPEED_PID_MAX_IOUT, MOTIVE_MOTOR_SPEED_PID_MAX_OUT&#125;;</span><br></pre></td></tr></table></figure><p>赋值完成后调用pid::init()函数：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Pid::init</span><span class="params">(pid_mode_e mode_, <span class="type">const</span> fp32 *pid_parm, fp32 *ref_, fp32 *set_, fp32 erro_delta_)</span></span><br><span class="line">&#123;</span><br><span class="line">    mode = mode_;</span><br><span class="line">    data.Kp = pid_parm[<span class="number">0</span>];</span><br><span class="line">    data.Ki = pid_parm[<span class="number">1</span>];</span><br><span class="line">    data.Kd = pid_parm[<span class="number">2</span>];</span><br><span class="line">    data.kf = pid_parm[<span class="number">3</span>];</span><br><span class="line">    data.max_iout = pid_parm[<span class="number">3</span>];</span><br><span class="line">    data.max_out = pid_parm[<span class="number">4</span>];</span><br><span class="line">    data.ref_last = *ref_;</span><br><span class="line">    data.<span class="built_in">set</span> = set_;</span><br><span class="line">    data.ref = ref_;</span><br><span class="line">    data.error = *set_ - *ref_;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (data.mode == PID_ANGLE)</span><br><span class="line">        data.error_delta = erro_delta_;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chassis_motive_motor[i].speed_pid.init(PID_SPEED, motive_speed_pid_parm, &amp;chassis_motive_motor[i].speed, &amp;chassis_motive_motor[i].speed_set, NULL);</span><br></pre></td></tr></table></figure><p>即开启速度pid，传入数组地址<strong>motive_speed_pid_parm</strong>，电机当前速度，和设定速度。</p>]]></content>
      
      
      <categories>
          
          <category> RM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RoboMaster </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
